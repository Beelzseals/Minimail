name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest  # can add matrix for Windows (see below)
    strategy:
        matrix:
            os: [ubuntu-latest, windows-latest]
    env:
      PYTHONPATH: .
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports: [5432:5432]
        options: >-
          --health-cmd="pg_isready -U testuser" --health-interval=10s --health-timeout=5s --health-retries=5
      redis:
        image: redis:7
        ports: [6379:6379]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
        
      - name: Create virtual environment
        run: python -m venv .venv

      - name: Cache uv virtualenv
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/pyproject.toml') }}

      - name: Install uv
        run: pip install uv

      - name: Install dependencies
        run: uv pip install -r requirements.txt  # replace with pyproject.toml/lock as needed

      - name: Run formatter (ruff format)
        run: uv pip install ruff && ruff format --check .

      - name: Run linter (ruff)
        run: ruff check .

      #- name: Run mypy (optional)
       # run: uv pip install mypy && mypy .

     # - name: Run tests
      #  run: pytest --cov=your_package --cov-report=xml

     # - name: Upload coverage report
      #  uses: codecov/codecov-action@v4
       # with:
        #  file: ./coverage.xml

  # Optionally, add a job for Docker build
  #docker-build:
    #runs-on: ubuntu-latest
    #steps:
      #- uses: actions/checkout@v4
      #- name: Build Docker image
        #run: docker build -t myapp:ci .
