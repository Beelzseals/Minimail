name: Python CI/CD Pipeline

# Controls when the workflow will run
on:
  push: # Run on pushes to these branches
    branches:
      - main
      - develop
      # Add any other branches you want to run CI on (e.g., release/*)
  pull_request: # Run on pull requests targeting these branches
    branches:
      - main
      - develop

jobs:
  # This job handles linting, testing, and security checks
  # It runs on ubuntu-latest to closely mimic the Docker environment,
  # which is beneficial even if local development is on Windows.
  build_and_test:
    runs-on: ubuntu-latest # Use Ubuntu runner, aligning with typical Docker base images
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Step 1: Checkout your repository code
      # Git automatically handles line endings based on repo/local config.
      # Ensure your .gitattributes is set up correctly if needed, or developers
      # configure core.autocrlf on their Windows machines.
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Step 3: Install uv (your package manager)
      # This script works for Linux environments like the GitHub Actions runner.
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      # Step 4: Create virtual environment and install dependencies
      # Commands are for the Linux runner environment.
      - name: Install dependencies with uv
        run: |
          uv venv .venv --python ${{ matrix.python-version }} # Create venv
          source .venv/bin/activate # Activate venv (Linux syntax)
          uv pip install -r requirements.txt
          # If you have dev dependencies:
          # uv pip install -r requirements-dev.txt

      # Step 5: Lint and Format with Ruff
      - name: Lint and Format Check with Ruff
        run: |
          source .venv/bin/activate
          uv run ruff check .
          uv run ruff format --check .

      # Step 6: Run Tests (Unit, Integration) with Pytest and Coverage
      - name: Run tests with Pytest
        env:
          APP_ENV: "test"
          DATABASE_URL: "postgresql://testuser:testpassword@localhost:5432/testdb"
          CELERY_BROKER_URL: "redis://localhost:6379/0"
          CELERY_RESULT_BACKEND: "redis://localhost:6379/0"
          REDIS_HOST: "localhost"
          REDIS_PORT: "6379"
          EMAIL_PROVIDER: "SMTP"
          SMTP_HOST: "localhost" # Mock SMTP for tests
          SMTP_PORT: "1025"
        run: |
          source .venv/bin/activate
          uv run pytest --cov=. --cov-report=xml --cov-report=term -vv

      # Step 7: Upload Coverage Report (Optional)
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: true
        # This step is conditional on having a Codecov account and token.

      # Step 8: Security Scanning - Bandit (SAST)
      - name: Run Bandit Security Scan
        run: |
          source .venv/bin/activate
          # uv pip install bandit # Uncomment if not in requirements-dev.txt
          uv run bandit -r . -ll -ii

      # Step 9: Security Scanning - Dependency Check (Safety)
      - name: Run Safety Dependency Check
        run: |
          source .venv/bin/activate
          # uv pip install safety # Uncomment if not in requirements-dev.txt
          uv run safety check -r requirements.txt

  # Optional: Job to build a Docker image
  # This job runs on ubuntu-latest, which is standard for Docker builds.
  build_docker:
    needs: build_and_test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile # Ensure your Dockerfile uses Linux paths and commands
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ github.sha }}

  # Placeholder for Deployment Job
  # deploy:
  #   needs: [build_and_test, build_docker]
  #   if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: production
  #   steps:
  #     - name: Deploy to Production
  #       run: |
  #         echo "Starting deployment..."
  #         # Your deployment commands here
